# Generated by Django 4.1.10 on 2023-08-08 22:46

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# arch.migrations.0013_auto_20210603_2343

class Migration(migrations.Migration):

    replaces = [('arch', '0001_initial'), ('arch', '0002_auto_20210121_2112'), ('arch', '0003_auto_20210121_2202'), ('arch', '0004_auto_20210121_2250'), ('arch', '0005_auto_20210122_0008'), ('arch', '0006_auto_20210122_0021'), ('arch', '0007_auto_20210122_0027'), ('arch', '0008_auto_20210122_1155'), ('arch', '0009_auto_20210122_1156'), ('arch', '0010_auto_20210206_2200'), ('arch', '0011_auto_20210314_1217'), ('arch', '0012_auto_20210603_2343'), ('arch', '0013_auto_20210603_2343'), ('arch', '0014_remove_problem_group'), ('arch', '0015_auto_20210604_0912'), ('arch', '0016_auto_20210604_0915'), ('arch', '0017_auto_20210604_1556'), ('arch', '0018_auto_20210815_1731'), ('arch', '0019_alter_problem_options'), ('arch', '0020_auto_20210901_1835'), ('arch', '0021_alter_problem_puid'), ('arch', '0022_alter_problem_aops_url'), ('arch', '0023_alter_problem_puid'), ('arch', '0024_remove_problem_aops_url'), ('arch', '0025_alter_hint_id_alter_problem_id'), ('arch', '0026_alter_problem_puid'), ('arch', '0027_problem_hyperlink'), ('arch', '0028_vote'), ('arch', '0029_alter_vote_niceness'), ('arch', '0030_alter_vote_niceness'), ('arch', '0031_vote_created_at_vote_updated_at'), ('arch', '0032_alter_problem_puid')]

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0018_auto_20200908_1307'),
    ]

    operations = [
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('source', models.CharField(blank=True, help_text='The source of the problem, such as `TSTST 2020/3`.If in doubt on formatting, follow what is written on the handout.', max_length=64)),
                ('description', models.CharField(help_text='A short description of the problem, e.g. `Quirky triangles.`. Most important if the problem does not have a source given. Use sentence case.', max_length=255)),
                ('group', models.ForeignKey(help_text='The unit to which this problem belongs.', on_delete=django.db.models.deletion.CASCADE, to='core.unitgroup')),
                ('aops_url', models.URLField(blank=True, help_text='Hyperlink to problem on Art of Problem Solving. Include HTTPS.', max_length=128)),
                ('puid', models.CharField(default='_', help_text='Unique problem identifier.', max_length=24)),
            ],
        ),
        migrations.CreateModel(
            name='Hint',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('keywords', models.CharField(blank=True, default='', help_text="A comma-separated list of keywords that a solver could look at to help them guess whether the hint is relevant or not. These are viewable immediately, so no spoilers here. Examples are `setup`, `advice`, `answer confirmation`, `nudge`, `main idea`, `solution set`, `converse direction`, `construction`, etc. Not all hints go well with keywords, so you can leave this blank if you can't think of anything useful to write.", max_length=255)),
                ('number', models.PositiveIntegerField(help_text='A number from 0 to 100 used to indicate an ordering for the hints. Here a number 0 means a hint given to someone at the very start whereas 100 means a hint given to someone who was read all previous hints or is close to the end of the problem. Do your best to make up an extrapolation for everything in between. A good idea is to give a sequence of hints with nearby numbers, say 20/21/22, each of which elaborates on the previous hint.')),
                ('content', models.TextField(help_text='The content of the hint. LaTeX rendering is okay.')),
                ('problem', models.ForeignKey(default=None, help_text='The container of the current hint.', on_delete=django.db.models.deletion.CASCADE, to='arch.problem')),
            ],
            options={
                'unique_together': {('problem', 'number')},
            },
        ),
        migrations.RunPython(
            code=arch.migrations.0013_auto_20210603_2343.set_puid,
            reverse_code=arch.migrations.0013_auto_20210603_2343.do_nothing,
        ),
        migrations.RemoveField(
            model_name='problem',
            name='group',
        ),
        migrations.AlterField(
            model_name='hint',
            name='keywords',
            field=models.CharField(blank=True, default='', help_text="A comma-separated list of keywords that a solver could look at to help them guess whether the hint is relevant or not. These are viewable immediately, so no spoilers here. Examples are 'setup', 'advice', 'answer confirmation', 'nudge', 'main idea', 'solution set', 'converse direction', 'construction', etc. Not all hints go well with keywords, so you can leave this blank if you can't think of anything useful to write.", max_length=255),
        ),
        migrations.AlterField(
            model_name='problem',
            name='description',
            field=models.CharField(help_text="A short description of the problem, e.g. 'Quirky triangles.'. Most important if the problem does not have a source given. Use sentence case.", max_length=255),
        ),
        migrations.AlterField(
            model_name='problem',
            name='source',
            field=models.CharField(blank=True, help_text="The source of the problem, such as 'TSTST 2020/3'.If in doubt on formatting, follow what is written on the handout.", max_length=64),
        ),
        migrations.AlterField(
            model_name='problem',
            name='aops_url',
            field=models.URLField(blank=True, help_text='URL to problem on AoPS. Include HTTPS.', max_length=128),
        ),
        migrations.AlterField(
            model_name='problem',
            name='description',
            field=models.CharField(help_text="Short description of problem, e.g. 'Quirky triangles.'. Use sentence case. Used to assist in searching.", max_length=255),
        ),
        migrations.AlterField(
            model_name='problem',
            name='puid',
            field=models.CharField(help_text='Unique problem identifier, as printed in OTIS handout.', max_length=24),
        ),
        migrations.AlterField(
            model_name='problem',
            name='source',
            field=models.CharField(blank=True, help_text="Human-readable source such as 'TSTST 2020/3'.If in doubt on formatting, follow what is written on the handout.", max_length=64),
        ),
        migrations.AlterField(
            model_name='problem',
            name='puid',
            field=models.CharField(help_text='Unique problem identifier, as printed in OTIS handout.', max_length=24, unique=True),
        ),
        migrations.AlterField(
            model_name='hint',
            name='keywords',
            field=models.CharField(blank=True, default='', help_text="A comma-separated list of keywords that a solver could look at to help them guess whether the hint is relevant or not. These are viewable immediately, so no spoilers here. Examples are 'setup', 'advice', 'answer confirmation', 'nudge','main idea', 'solution set', 'converse direction', 'construction', etc. Not all hints go well with keywords, so you can leave this blank if you can't think of anything useful to write.", max_length=255),
        ),
        migrations.AlterField(
            model_name='problem',
            name='source',
            field=models.CharField(blank=True, help_text="Human-readable source such as 'TSTST 2020/3'. If in doubt on formatting, follow what is written on the handout.", max_length=64),
        ),
        migrations.AlterModelOptions(
            name='problem',
            options={'ordering': ('puid',)},
        ),
        migrations.RemoveField(
            model_name='problem',
            name='description',
        ),
        migrations.RemoveField(
            model_name='problem',
            name='source',
        ),
        migrations.AlterField(
            model_name='problem',
            name='puid',
            field=models.CharField(help_text='Unique problem identifier, as printed in OTIS handout.', max_length=24, unique=True, validators=[django.core.validators.RegexValidator(message="Only uppercase letters and digits appear in PUID's.", regex='[A-Z0-9]+')], verbose_name='PUID'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='puid',
            field=models.CharField(help_text='Unique problem identifier, as printed in OTIS handout.', max_length=24, unique=True, validators=[django.core.validators.RegexValidator(message="Only uppercase letters and digits appear in PUID's.", regex='^[A-Z0-9]+$')], verbose_name='PUID'),
        ),
        migrations.RemoveField(
            model_name='problem',
            name='aops_url',
        ),
        migrations.AlterField(
            model_name='hint',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='problem',
            name='puid',
            field=models.CharField(help_text='Problem identifier, as printed in OTIS. Capital letters and digits only.', max_length=24, unique=True, validators=[django.core.validators.RegexValidator(message="Only uppercase letters and digits appear in PUID's.", regex='^[A-Z0-9]+$')], verbose_name='PUID'),
        ),
        migrations.AddField(
            model_name='problem',
            name='hyperlink',
            field=models.URLField(blank=True, help_text='An AoPS URL or similar'),
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('niceness', models.PositiveIntegerField(help_text='A student submitted number from 0 to 10 used to indicate the approximate niceness of a problem.', validators=[django.core.validators.MaxValueValidator(10)])),
                ('problem', models.ForeignKey(help_text='The container of the current vote.', on_delete=django.db.models.deletion.CASCADE, to='arch.problem')),
                ('user', models.ForeignKey(help_text='User who voted for this problem.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('created_at', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AlterField(
            model_name='problem',
            name='puid',
            field=models.CharField(help_text='Problem identifier, as printed in OTIS. Capital letters and digits only.', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message="Only uppercase letters and digits appear in PUID's.", regex='^[A-Z0-9]+$')], verbose_name='PUID'),
        ),
    ]
